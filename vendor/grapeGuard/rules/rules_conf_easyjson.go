// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package rules

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson795c59c6DecodeGrapeGuardRules(in *jlexer.Lexer, out *userAgentRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checkTime":
			out.CheckTime = int(in.Int())
		case "AnitEmptyUA":
			out.AnitEmptyUA = bool(in.Bool())
		case "blocked":
			out.SingelBUA = string(in.String())
		case "ShowUA":
			out.ShowUA = bool(in.Bool())
		case "open":
			out.Bopen = bool(in.Bool())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules(out *jwriter.Writer, in userAgentRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"checkTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CheckTime))
	}
	{
		const prefix string = ",\"AnitEmptyUA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AnitEmptyUA))
	}
	{
		const prefix string = ",\"blocked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SingelBUA))
	}
	{
		const prefix string = ",\"ShowUA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ShowUA))
	}
	{
		const prefix string = ",\"open\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bopen))
	}
	{
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userAgentRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userAgentRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userAgentRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userAgentRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules1(in *jlexer.Lexer, out *singleRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checkTime":
			out.CheckTime = int(in.Int())
		case "access":
			out.Access = int(in.Int())
		case "nfcheckTime":
			out.NoFoundChk = int(in.Int())
		case "nfcount":
			out.NoFoundCount = int(in.Int())
		case "blockedTime":
			out.BlockedTime = int(in.Int())
		case "open":
			out.Bopen = bool(in.Bool())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules1(out *jwriter.Writer, in singleRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"checkTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CheckTime))
	}
	{
		const prefix string = ",\"access\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Access))
	}
	{
		const prefix string = ",\"nfcheckTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NoFoundChk))
	}
	{
		const prefix string = ",\"nfcount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NoFoundCount))
	}
	{
		const prefix string = ",\"blockedTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BlockedTime))
	}
	{
		const prefix string = ",\"open\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bopen))
	}
	{
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v singleRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v singleRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *singleRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *singleRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules1(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules2(in *jlexer.Lexer, out *reqGuardRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checkTime":
			out.CheckTime = int(in.Int())
		case "access":
			out.Access = int(in.Int())
		case "blockedTime":
			out.BlockedTime = int(in.Int())
		case "someCount":
			out.SomeCount = int(in.Int())
		case "Include":
			out.Include = string(in.String())
		case "open":
			out.Bopen = bool(in.Bool())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules2(out *jwriter.Writer, in reqGuardRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"checkTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CheckTime))
	}
	{
		const prefix string = ",\"access\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Access))
	}
	{
		const prefix string = ",\"blockedTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BlockedTime))
	}
	{
		const prefix string = ",\"someCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SomeCount))
	}
	{
		const prefix string = ",\"Include\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Include))
	}
	{
		const prefix string = ",\"open\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bopen))
	}
	{
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reqGuardRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reqGuardRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reqGuardRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reqGuardRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules2(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules3(in *jlexer.Lexer, out *proxyRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checkTime":
			out.CheckTime = int(in.Int())
		case "ipcount":
			out.Ipcount = int(in.Int())
		case "open":
			out.Bopen = bool(in.Bool())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules3(out *jwriter.Writer, in proxyRule) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CheckTime != 0 {
		const prefix string = ",\"checkTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CheckTime))
	}
	if in.Ipcount != 0 {
		const prefix string = ",\"ipcount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Ipcount))
	}
	{
		const prefix string = ",\"open\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bopen))
	}
	{
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v proxyRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v proxyRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *proxyRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *proxyRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules3(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules4(in *jlexer.Lexer, out *commonRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "open":
			out.Bopen = bool(in.Bool())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules4(out *jwriter.Writer, in commonRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"open\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bopen))
	}
	{
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v commonRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v commonRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *commonRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *commonRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules4(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules5(in *jlexer.Lexer, out *checkBadUARule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "open":
			out.Bopen = bool(in.Bool())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules5(out *jwriter.Writer, in checkBadUARule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"open\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bopen))
	}
	{
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v checkBadUARule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v checkBadUARule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *checkBadUARule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *checkBadUARule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules5(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules6(in *jlexer.Lexer, out *captchaRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "tickTime":
			out.TickTime = int(in.Int())
		case "cookies":
			out.Cookies = string(in.String())
		case "ecryptKey":
			out.EcryptKey = string(in.String())
		case "open":
			out.Bopen = bool(in.Bool())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules6(out *jwriter.Writer, in captchaRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"tickTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TickTime))
	}
	{
		const prefix string = ",\"cookies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cookies))
	}
	{
		const prefix string = ",\"ecryptKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EcryptKey))
	}
	{
		const prefix string = ",\"open\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bopen))
	}
	{
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v captchaRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v captchaRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *captchaRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *captchaRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules6(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules7(in *jlexer.Lexer, out *PickoutQueryRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RemoveFP":
			out.RemoveFP = bool(in.Bool())
		case "Exts":
			out.Exts = string(in.String())
		case "open":
			out.Bopen = bool(in.Bool())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules7(out *jwriter.Writer, in PickoutQueryRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"RemoveFP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RemoveFP))
	}
	{
		const prefix string = ",\"Exts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Exts))
	}
	{
		const prefix string = ",\"open\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bopen))
	}
	{
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PickoutQueryRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PickoutQueryRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PickoutQueryRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PickoutQueryRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules7(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules8(in *jlexer.Lexer, out *PackoutRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if out.Filters == nil {
					if !in.IsDelim(']') {
						out.Filters = make([]ExtFilter, 0, 4)
					} else {
						out.Filters = []ExtFilter{}
					}
				} else {
					out.Filters = (out.Filters)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ExtFilter
					(v1).UnmarshalEasyJSON(in)
					out.Filters = append(out.Filters, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Open":
			out.Open = bool(in.Bool())
		case "Type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules8(out *jwriter.Writer, in PackoutRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Filters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Filters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Filters {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Open\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Open))
	}
	{
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PackoutRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PackoutRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PackoutRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PackoutRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules8(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules9(in *jlexer.Lexer, out *GuardXml) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "XMLName":
			out.XMLName = string(in.String())
		case "Rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]GuardRule, 0, 1)
					} else {
						out.Rules = []GuardRule{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v4 GuardRule
					(v4).UnmarshalEasyJSON(in)
					out.Rules = append(out.Rules, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Pickout":
			(out.Pickout).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules9(out *jwriter.Writer, in GuardXml) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"XMLName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.XMLName))
	}
	{
		const prefix string = ",\"Rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Rules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Rules {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Pickout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Pickout).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuardXml) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuardXml) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuardXml) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuardXml) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules9(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules10(in *jlexer.Lexer, out *GuardRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "xml_name":
			out.XMLName = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "show_error_page":
			out.ShowErrorPage = bool(in.Bool())
		case "single":
			if in.IsNull() {
				in.Skip()
				out.Single = nil
			} else {
				if out.Single == nil {
					out.Single = new(singleRule)
				}
				(*out.Single).UnmarshalEasyJSON(in)
			}
		case "proxy":
			if in.IsNull() {
				in.Skip()
				out.Proxy = nil
			} else {
				if out.Proxy == nil {
					out.Proxy = new(proxyRule)
				}
				(*out.Proxy).UnmarshalEasyJSON(in)
			}
		case "userAgent":
			if in.IsNull() {
				in.Skip()
				out.UA = nil
			} else {
				if out.UA == nil {
					out.UA = new(userAgentRule)
				}
				(*out.UA).UnmarshalEasyJSON(in)
			}
		case "checkUA":
			if in.IsNull() {
				in.Skip()
				out.CBU = nil
			} else {
				if out.CBU == nil {
					out.CBU = new(checkBadUARule)
				}
				(*out.CBU).UnmarshalEasyJSON(in)
			}
		case "reqGuard":
			if in.IsNull() {
				in.Skip()
				out.ReqGuard = nil
			} else {
				if out.ReqGuard == nil {
					out.ReqGuard = new(reqGuardRule)
				}
				(*out.ReqGuard).UnmarshalEasyJSON(in)
			}
		case "pickout":
			if in.IsNull() {
				in.Skip()
				out.Pickout = nil
			} else {
				if out.Pickout == nil {
					out.Pickout = new(PickoutQueryRule)
				}
				(*out.Pickout).UnmarshalEasyJSON(in)
			}
		case "acheck":
			if in.IsNull() {
				in.Skip()
				out.ACheck = nil
			} else {
				if out.ACheck == nil {
					out.ACheck = new(AndroidCheckRule)
				}
				(*out.ACheck).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules10(out *jwriter.Writer, in GuardRule) {
	out.RawByte('{')
	first := true
	_ = first
	if in.XMLName != "" {
		const prefix string = ",\"xml_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.XMLName))
	}
	{
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"show_error_page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ShowErrorPage))
	}
	{
		const prefix string = ",\"single\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Single == nil {
			out.RawString("null")
		} else {
			(*in.Single).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"proxy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Proxy == nil {
			out.RawString("null")
		} else {
			(*in.Proxy).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"userAgent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UA == nil {
			out.RawString("null")
		} else {
			(*in.UA).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"checkUA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CBU == nil {
			out.RawString("null")
		} else {
			(*in.CBU).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"reqGuard\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ReqGuard == nil {
			out.RawString("null")
		} else {
			(*in.ReqGuard).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"pickout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Pickout == nil {
			out.RawString("null")
		} else {
			(*in.Pickout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"acheck\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ACheck == nil {
			out.RawString("null")
		} else {
			(*in.ACheck).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuardRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuardRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuardRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuardRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules10(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules11(in *jlexer.Lexer, out *ExtFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Include":
			out.Include = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules11(out *jwriter.Writer, in ExtFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Include\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Include))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules11(l, v)
}
func easyjson795c59c6DecodeGrapeGuardRules12(in *jlexer.Lexer, out *AndroidCheckRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Level":
			out.Level = int(in.Int())
		case "KeyTTL":
			out.KeyTTL = int(in.Int())
		case "TryCount":
			out.TryCount = int(in.Int())
		case "TryTTL":
			out.TryTTL = int(in.Int())
		case "WhiteTTL":
			out.WhiteTTL = int(in.Int())
		case "blockedTime":
			out.BlockedTime = int(in.Int())
		case "open":
			out.Bopen = bool(in.Bool())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson795c59c6EncodeGrapeGuardRules12(out *jwriter.Writer, in AndroidCheckRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"KeyTTL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.KeyTTL))
	}
	{
		const prefix string = ",\"TryCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TryCount))
	}
	{
		const prefix string = ",\"TryTTL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TryTTL))
	}
	{
		const prefix string = ",\"WhiteTTL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WhiteTTL))
	}
	{
		const prefix string = ",\"blockedTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BlockedTime))
	}
	{
		const prefix string = ",\"open\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bopen))
	}
	{
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AndroidCheckRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson795c59c6EncodeGrapeGuardRules12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AndroidCheckRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson795c59c6EncodeGrapeGuardRules12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AndroidCheckRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson795c59c6DecodeGrapeGuardRules12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AndroidCheckRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson795c59c6DecodeGrapeGuardRules12(l, v)
}
